<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://weenews.github.io</id>
    <title>WeeNews&apos;s blog</title>
    <updated>2020-05-11T11:05:35.815Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://weenews.github.io"/>
    <link rel="self" href="https://weenews.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://weenews.github.io/images/avatar.png</logo>
    <icon>https://weenews.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, WeeNews&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[linux内核协议栈之网络信息统计SNMP]]></title>
        <id>https://weenews.github.io/post/linux-nei-he-xie-yi-zhan-zhi-wang-luo-xin-xi-tong-ji-snmp/</id>
        <link href="https://weenews.github.io/post/linux-nei-he-xie-yi-zhan-zhi-wang-luo-xin-xi-tong-ji-snmp/">
        </link>
        <updated>2020-05-11T10:53:58.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#snmp%E7%AE%80%E4%BB%8B">SNMP简介</a></li>
<li><a href="#snmp%E4%BF%A1%E6%81%AF%E7%BB%9F%E8%AE%A1%E6%A1%86%E6%9E%B6%E5%92%8C%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90">SNMP信息统计框架和实现分析</a>
<ul>
<li><a href="#%E6%A1%86%E6%9E%B6">框架</a></li>
<li><a href="#%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0">具体实现</a></li>
</ul>
</li>
</ul>
</p>
<h1 id="snmp简介">SNMP简介</h1>
<p>SNMP是英文&quot;Simple Network Management Protocol&quot;的缩写，中文意思是&quot;简单网络管理协议&quot;。SNMP是一种简单网络管理协议，它属于TCP/IP五层协议中的应用层协议，用于网络管理的协议。SNMP主要用于网络设备的管理。由于SNMP协议简单可靠 ，受到了众多厂商的欢迎，成为了目前最为广泛的网管协议。<br>
<strong>SNMP的工作方式</strong>：管理员需要向设备获取数据，所以SNMP提供了【读】操作；管理员需要向设备执行设置操作，所以SNMP提供了【写】操作；设备需要在重要状况改变的时候，向管理员通报事件的发生，所以SNMP提供了【Trap】操作。</p>
<p>在具体实现上，SNMP为管理员提供了一个网管平台(NMS)，又称为【管理站】，负责网管命令的发出、数据存储、及数据分析。【被】监管的设备上运行一个SNMP代理(Agent))，代理实现设备与管理站的SNMP通信。<br>
<img src="https://img-blog.csdnimg.cn/20200421094847672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlbnFpYW5neGlu,size_16,color_FFFFFF,t_70" alt="SNMP的实现结构" loading="lazy"><br>
管理站与代理端通过MIB进行接口统一，MIB定义了设备中的被管理对象。管理站和代理都实现了相应的MIB对象，使得双方可以识别对方的数据，实现通信。管理站向代理申请MIB中定义的数据，代理识别后，将管理设备提供的相关状态或参数等数据（<font color=red><strong>这些数据由内核的相关实现提供，存储于/proc等位置，下图是/proc/net/snmp文件中的内容，记录了ipv4相关的统计信息</strong></font>）转换为MIB定义的格式，应答给管理站，完成一次管理操作。<br>
<img src="https://img-blog.csdnimg.cn/20200421095714443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlbnFpYW5neGlu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<strong>内核网络协议</strong>对SNMP协议的支持主要体现在统计了相关的网络信息，并将这些信息通过proc系统或其他配置文件进行展示（本人项目只是简单涉及到这个协议，这是我对它的一个简单理解，如果有误欢迎指正、交流）。下面的内容就是介绍内核网络栈是如何提供这些统计信息的，它的实现框架是怎样的。</p>
<h1 id="snmp信息统计框架和实现分析">SNMP信息统计框架和实现分析</h1>
<h2 id="框架">框架</h2>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200422093723284.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlbnFpYW5neGlu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="具体实现">具体实现</h2>
<p><strong>相关结构体和函数的代码展示在下方的代码块中，请自行查看。</strong><br>
1、首先在net结构中定义了一个netns_mib类型的mib成员，该成员中通过宏的方式定义了存放各协议统计信息的成员（<em><strong>是指针类型，所以需要初始化分配内存</strong></em>），它们的类型被定义在&lt;include/net/snmp.h&gt;中，大多数为一个数组，数组中存放各个统计信息，至于数组中什么位置存放什么信息则由定义在&lt;include/uapi/linux/snmp.h&gt;中的枚举类型定义，这些枚举类型都以0开始，表示数组的下标(见下方代码块)。</p>
<pre><code class="language-c">struct net {
	atomic_t		passive;	/* To decided when the network
						 * namespace should be freed.
						 */
	atomic_t		count;		/* To decided when the network
						 *  namespace should be shut down.
						 */
	spinlock_t		rules_mod_lock;

	u32			hash_mix;
	atomic64_t		cookie_gen;

	struct list_head	list;		/* list of network namespaces */
	struct list_head	cleanup_list;	/* namespaces on death row */
	struct list_head	exit_list;	/* Use only net_mutex */

	struct user_namespace   *user_ns;	/* Owning user namespace */
	spinlock_t		nsid_lock;
	struct idr		netns_ids;

	struct ns_common	ns;

	struct proc_dir_entry 	*proc_net;
	struct proc_dir_entry 	*proc_net_stat;

#ifdef CONFIG_SYSCTL
	struct ctl_table_set	sysctls;
#endif

	struct sock 		*rtnl;			/* rtnetlink socket */
	struct sock		*genl_sock;

	struct list_head 	dev_base_head;
	struct hlist_head 	*dev_name_head;
	struct hlist_head	*dev_index_head;
	unsigned int		dev_base_seq;	/* protected by rtnl_mutex */
	int			ifindex;
	unsigned int		dev_unreg_count;

	/* core fib_rules */
	struct list_head	rules_ops;


	struct net_device       *loopback_dev;          /* The loopback */
	struct netns_core	core;
	struct netns_mib	mib;    /* here*/
	struct netns_packet	packet;
	struct netns_unix	unx;
	struct netns_ipv4	ipv4;
#if IS_ENABLED(CONFIG_IPV6)
	struct netns_ipv6	ipv6;
#endif
......后面的代码省略
</code></pre>
<pre><code class="language-c">struct netns_mib {
	DEFINE_SNMP_STAT(struct tcp_mib, tcp_statistics);
	DEFINE_SNMP_STAT(struct ipstats_mib, ip_statistics);
	DEFINE_SNMP_STAT(struct linux_mib, net_statistics);
	DEFINE_SNMP_STAT(struct udp_mib, udp_statistics);
	DEFINE_SNMP_STAT(struct udp_mib, udplite_statistics);
	DEFINE_SNMP_STAT(struct icmp_mib, icmp_statistics);
	DEFINE_SNMP_STAT_ATOMIC(struct icmpmsg_mib, icmpmsg_statistics);

#if IS_ENABLED(CONFIG_IPV6)
	struct proc_dir_entry *proc_net_devsnmp6;
	DEFINE_SNMP_STAT(struct udp_mib, udp_stats_in6);
	DEFINE_SNMP_STAT(struct udp_mib, udplite_stats_in6);
	DEFINE_SNMP_STAT(struct ipstats_mib, ipv6_statistics);
	DEFINE_SNMP_STAT(struct icmpv6_mib, icmpv6_statistics);
	DEFINE_SNMP_STAT_ATOMIC(struct icmpv6msg_mib, icmpv6msg_statistics);
#endif
#ifdef CONFIG_XFRM_STATISTICS
	DEFINE_SNMP_STAT(struct linux_xfrm_mib, xfrm_statistics);
#endif
};
</code></pre>
<pre><code class="language-c">struct ipstats_mib {
	/* mibs[] must be first field of struct ipstats_mib */
	u64		mibs[IPSTATS_MIB_MAX];
	struct u64_stats_sync syncp;
};

/* ICMP */
#define ICMP_MIB_MAX	__ICMP_MIB_MAX
struct icmp_mib {
	unsigned long	mibs[ICMP_MIB_MAX];
};
</code></pre>
<pre><code class="language-c">       ......
enum
{
	TCP_MIB_NUM = 0,
	TCP_MIB_RTOALGORITHM,			/* RtoAlgorithm */
	TCP_MIB_RTOMIN,				/* RtoMin */
	TCP_MIB_RTOMAX,				/* RtoMax */
	TCP_MIB_MAXCONN,			/* MaxConn */
	TCP_MIB_ACTIVEOPENS,			/* ActiveOpens */
	TCP_MIB_PASSIVEOPENS,			/* PassiveOpens */
	TCP_MIB_ATTEMPTFAILS,			/* AttemptFails */
	TCP_MIB_ESTABRESETS,			/* EstabResets */
	TCP_MIB_CURRESTAB,			/* CurrEstab */
	TCP_MIB_INSEGS,				/* InSegs */
	TCP_MIB_OUTSEGS,			/* OutSegs */
	TCP_MIB_RETRANSSEGS,			/* RetransSegs */
	TCP_MIB_INERRS,				/* InErrs */
	TCP_MIB_OUTRSTS,			/* OutRsts */
	TCP_MIB_CSUMERRORS,			/* InCsumErrors */
	__TCP_MIB_MAX
};

/* udp mib definitions */
/*
 * RFC 1213:  MIB-II UDP group
 * RFC 2013 (updates 1213):  SNMPv2-MIB-UDP
 */
enum
{
	UDP_MIB_NUM = 0,
	UDP_MIB_INDATAGRAMS,			/* InDatagrams */
	UDP_MIB_NOPORTS,			/* NoPorts */
	UDP_MIB_INERRORS,			/* InErrors */
	UDP_MIB_OUTDATAGRAMS,			/* OutDatagrams */
	UDP_MIB_RCVBUFERRORS,			/* RcvbufErrors */
	UDP_MIB_SNDBUFERRORS,			/* SndbufErrors */
	UDP_MIB_CSUMERRORS,			/* InCsumErrors */
	UDP_MIB_IGNOREDMULTI,			/* IgnoredMulti */
	__UDP_MIB_MAX
};
            ......
</code></pre>
<p>2、协议族在初始化时为这些统计结构分配空间，进行初始化，这里初始化用的是per_cpu变量，即在每个cpu中都分配一个该变量的副本，这样做的目的是为了减少同步机制带来的性能损耗（在多处理器环境下避免了在修改此值时的加锁操作，通过空间换时间）。<a href="http://www.wowotech.net/linux_kenrel/per-cpu.html">per_cpu相关</a>。</p>
<pre><code class="language-c">static __net_init int ipv4_mib_init_net(struct net *net)
{
	int i;

	net-&gt;mib.tcp_statistics = alloc_percpu(struct tcp_mib);
	if (!net-&gt;mib.tcp_statistics)
		goto err_tcp_mib;
	net-&gt;mib.ip_statistics = alloc_percpu(struct ipstats_mib);
	if (!net-&gt;mib.ip_statistics)
		goto err_ip_mib;

	for_each_possible_cpu(i) {
		struct ipstats_mib *af_inet_stats;
		af_inet_stats = per_cpu_ptr(net-&gt;mib.ip_statistics, i);
		u64_stats_init(&amp;af_inet_stats-&gt;syncp);
	}

	net-&gt;mib.net_statistics = alloc_percpu(struct linux_mib);
	if (!net-&gt;mib.net_statistics)
		goto err_net_mib;
	net-&gt;mib.udp_statistics = alloc_percpu(struct udp_mib);
	if (!net-&gt;mib.udp_statistics)
		goto err_udp_mib;
	net-&gt;mib.udplite_statistics = alloc_percpu(struct udp_mib);
	if (!net-&gt;mib.udplite_statistics)
		goto err_udplite_mib;
	net-&gt;mib.icmp_statistics = alloc_percpu(struct icmp_mib);
	if (!net-&gt;mib.icmp_statistics)
		goto err_icmp_mib;
	net-&gt;mib.icmpmsg_statistics = kzalloc(sizeof(struct icmpmsg_mib),
					      GFP_KERNEL);
	if (!net-&gt;mib.icmpmsg_statistics)
		goto err_icmpmsg_mib;

	tcp_mib_init(net);
	return 0;

err_icmpmsg_mib:
	free_percpu(net-&gt;mib.icmp_statistics);
err_icmp_mib:
	free_percpu(net-&gt;mib.udplite_statistics);
err_udplite_mib:
	free_percpu(net-&gt;mib.udp_statistics);
err_udp_mib:
	free_percpu(net-&gt;mib.net_statistics);
err_net_mib:
	free_percpu(net-&gt;mib.ip_statistics);
err_ip_mib:
	free_percpu(net-&gt;mib.tcp_statistics);
err_tcp_mib:
	return -ENOMEM;
}

static __net_exit void ipv4_mib_exit_net(struct net *net)
{
	kfree(net-&gt;mib.icmpmsg_statistics);
	free_percpu(net-&gt;mib.icmp_statistics);
	free_percpu(net-&gt;mib.udplite_statistics);
	free_percpu(net-&gt;mib.udp_statistics);
	free_percpu(net-&gt;mib.net_statistics);
	free_percpu(net-&gt;mib.ip_statistics);
	free_percpu(net-&gt;mib.tcp_statistics);
}

static __net_initdata struct pernet_operations ipv4_mib_ops = {
	.init = ipv4_mib_init_net,
	.exit = ipv4_mib_exit_net,
};

static int __init init_ipv4_mibs(void)
{
	return register_pernet_subsys(&amp;ipv4_mib_ops);
}
</code></pre>
<p>3、內镶在网络栈中的统计函数在对应的位置进行统计，将信息写入上述的统计字段（统计到当前cpu的副本中）。比如下方udp_recvmsg函数中的<strong>UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_CSUMERRORS, is_udplite)</strong> 和<br>
<strong>UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite)</strong> 就是在统计校验和错误的数据包以及接收出错的数据包<br>
这些宏其实就是增加对应统计字段的值。</p>
<pre><code class="language-c">int udp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len, int noblock,
		int flags, int *addr_len)
{
	struct inet_sock *inet = inet_sk(sk);
	DECLARE_SOCKADDR(struct sockaddr_in *, sin, msg-&gt;msg_name);
	struct sk_buff *skb;
	unsigned int ulen, copied;
	int peeked, off = 0;
	int err;
	int is_udplite = IS_UDPLITE(sk);
	bool checksum_valid = false;
	bool slow;

	if (flags &amp; MSG_ERRQUEUE)
		return ip_recv_error(sk, msg, len, addr_len);

try_again:
	skb = __skb_recv_datagram(sk, flags | (noblock ? MSG_DONTWAIT : 0),
				  &amp;peeked, &amp;off, &amp;err);
	if (!skb)
		goto out;

	ulen = skb-&gt;len - sizeof(struct udphdr);
	copied = len;
	if (copied &gt; ulen)
		copied = ulen;
	else if (copied &lt; ulen)
		msg-&gt;msg_flags |= MSG_TRUNC;

	/*
	 * If checksum is needed at all, try to do it while copying the
	 * data.  If the data is truncated, or if we only want a partial
	 * coverage checksum (UDP-Lite), do it before the copy.
	 */

	if (copied &lt; ulen || UDP_SKB_CB(skb)-&gt;partial_cov) {
		checksum_valid = !udp_lib_checksum_complete(skb);
		if (!checksum_valid)
			goto csum_copy_err;
	}

	if (checksum_valid || skb_csum_unnecessary(skb))
		err = skb_copy_datagram_msg(skb, sizeof(struct udphdr),
					    msg, copied);
	else {
		err = skb_copy_and_csum_datagram_msg(skb, sizeof(struct udphdr),
						     msg);

		if (err == -EINVAL)
			goto csum_copy_err;
	}

	if (unlikely(err)) {
		trace_kfree_skb(skb, udp_recvmsg);
		if (!peeked) {
			atomic_inc(&amp;sk-&gt;sk_drops);
			UDP_INC_STATS_USER(sock_net(sk),
					   UDP_MIB_INERRORS, is_udplite);
		}
		goto out_free;
	}

	if (!peeked)
		UDP_INC_STATS_USER(sock_net(sk),
				UDP_MIB_INDATAGRAMS, is_udplite);

	sock_recv_ts_and_drops(msg, sk, skb);

	/* Copy the address. */
	if (sin) {
		sin-&gt;sin_family = AF_INET;
		sin-&gt;sin_port = udp_hdr(skb)-&gt;source;
		sin-&gt;sin_addr.s_addr = ip_hdr(skb)-&gt;saddr;
		memset(sin-&gt;sin_zero, 0, sizeof(sin-&gt;sin_zero));
		*addr_len = sizeof(*sin);
	}
	if (inet-&gt;cmsg_flags)
		ip_cmsg_recv_offset(msg, skb, sizeof(struct udphdr), off);

	err = copied;
	if (flags &amp; MSG_TRUNC)
		err = ulen;

out_free:
	skb_free_datagram_locked(sk, skb);
out:
	return err;

csum_copy_err:
	slow = lock_sock_fast(sk);
	if (!skb_kill_datagram(sk, skb, flags)) {
		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_CSUMERRORS, is_udplite);
		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
	}
	unlock_sock_fast(sk, slow);

	/* starting over for a new packet, but check if we need to yield */
	cond_resched();
	msg-&gt;msg_flags &amp;= ~MSG_TRUNC;
	goto try_again;
}
</code></pre>
<p>4、将这些数据通过proc系统（虚拟文件系统，存在于内存中）向用户提供访问。这时需要将对应字段在所有cpu中的副本加起来，这个工作在ipv4中是通过以下函数完成的。</p>
<pre><code class="language-c">unsigned long snmp_fold_field(void __percpu *mib, int offt)
{
	unsigned long res = 0;
	int i;

	for_each_possible_cpu(i)
		res += snmp_get_cpu_field(mib, i, offt);
	return res;
}
</code></pre>
<p>所有统计信息都被通过/proc/net/snmp文件展示给用户。<br>
这部分的实现在对应协议族下的proc.c文件中，将上述统计信息按照特定格式展示在proc文件中。</p>
<pre><code class="language-c">static int snmp_seq_show(struct seq_file *seq, void *v)
{
	int i;
	struct net *net = seq-&gt;private;

	seq_puts(seq, &quot;Ip: Forwarding DefaultTTL&quot;);

	for (i = 0; snmp4_ipstats_list[i].name != NULL; i++)
		seq_printf(seq, &quot; %s&quot;, snmp4_ipstats_list[i].name);

	seq_printf(seq, &quot;\nIp: %d %d&quot;,
		   IPV4_DEVCONF_ALL(net, FORWARDING) ? 1 : 2,
		   sysctl_ip_default_ttl);

	BUILD_BUG_ON(offsetof(struct ipstats_mib, mibs) != 0);
	for (i = 0; snmp4_ipstats_list[i].name != NULL; i++)
		seq_printf(seq, &quot; %llu&quot;,
			   snmp_fold_field64(net-&gt;mib.ip_statistics,
					     snmp4_ipstats_list[i].entry,
					     offsetof(struct ipstats_mib, syncp)));

	icmp_put(seq);	/* RFC 2011 compatibility */
	icmpmsg_put(seq);

	seq_puts(seq, &quot;\nTcp:&quot;);
	for (i = 0; snmp4_tcp_list[i].name != NULL; i++)
		seq_printf(seq, &quot; %s&quot;, snmp4_tcp_list[i].name);

	seq_puts(seq, &quot;\nTcp:&quot;);
	for (i = 0; snmp4_tcp_list[i].name != NULL; i++) {
		/* MaxConn field is signed, RFC 2012 */
		if (snmp4_tcp_list[i].entry == TCP_MIB_MAXCONN)
			seq_printf(seq, &quot; %ld&quot;,
				   snmp_fold_field(net-&gt;mib.tcp_statistics,
						   snmp4_tcp_list[i].entry));
		else
			seq_printf(seq, &quot; %lu&quot;,
				   snmp_fold_field(net-&gt;mib.tcp_statistics,
						   snmp4_tcp_list[i].entry));
	}

	seq_puts(seq, &quot;\nUdp:&quot;);
	for (i = 0; snmp4_udp_list[i].name != NULL; i++)
		seq_printf(seq, &quot; %s&quot;, snmp4_udp_list[i].name);

	seq_puts(seq, &quot;\nUdp:&quot;);
	for (i = 0; snmp4_udp_list[i].name != NULL; i++)
		seq_printf(seq, &quot; %lu&quot;,
			   snmp_fold_field(net-&gt;mib.udp_statistics,
					   snmp4_udp_list[i].entry));

	/* the UDP and UDP-Lite MIBs are the same */
	seq_puts(seq, &quot;\nUdpLite:&quot;);
	for (i = 0; snmp4_udp_list[i].name != NULL; i++)
		seq_printf(seq, &quot; %s&quot;, snmp4_udp_list[i].name);

	seq_puts(seq, &quot;\nUdpLite:&quot;);
	for (i = 0; snmp4_udp_list[i].name != NULL; i++)
		seq_printf(seq, &quot; %lu&quot;,
			   snmp_fold_field(net-&gt;mib.udplite_statistics,
					   snmp4_udp_list[i].entry));

	seq_putc(seq, '\n');
	return 0;
}

static __net_init int ip_proc_init_net(struct net *net)
{
	if (!proc_create(&quot;sockstat&quot;, S_IRUGO, net-&gt;proc_net,
			 &amp;sockstat_seq_fops))
		goto out_sockstat;
	if (!proc_create(&quot;netstat&quot;, S_IRUGO, net-&gt;proc_net, &amp;netstat_seq_fops))
		goto out_netstat;
	if (!proc_create(&quot;snmp&quot;, S_IRUGO, net-&gt;proc_net, &amp;snmp_seq_fops))
		goto out_snmp;

	return 0;

out_snmp:
	remove_proc_entry(&quot;netstat&quot;, net-&gt;proc_net);
out_netstat:
	remove_proc_entry(&quot;sockstat&quot;, net-&gt;proc_net);
out_sockstat:
	return -ENOMEM;
}
</code></pre>
<p>本文只是简单对内核网络栈对snmp的支持进行了分析，总的来说，这部分内容还是比较独立的，在开发自己的协议栈时，如果要增加这部分内容，那么你所需要做的并不复杂，唯一比较麻烦的地方可能就在于在增加了自己定义的内容后需要重新编译内核，因为你改动了net结构体！这个结构体是所有内核网络协议栈共用的！<br>
OVER</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello]]></title>
        <id>https://weenews.github.io/post/hello/</id>
        <link href="https://weenews.github.io/post/hello/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>欢迎来到我的博客！</p>
]]></summary>
        <content type="html"><![CDATA[<p>欢迎来到我的博客！</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>